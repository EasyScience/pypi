# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python libs

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Every day at 1am
    - cron: '0 1 * * *'    
    
jobs:

  get_Latest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout ILL repo 
      run: |
        git clone https://code.ill.fr/scientific-software/crysfml/ ./
        git checkout feature-python_api-build_wheels
        rm -rf ./.git ./Html
    - uses: actions/upload-artifact@v2
      with:
        name: CrysFML_SRC
        path: ${{ github.workspace }}
        retention-days: 1
        

  create-Linux:
    runs-on: ubuntu-latest
    
    needs: get_Latest
    
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: CrysFML_SRC
        
    - name: Build manylinux wheels
      run:  |
        chmod +x ./Scripts/buildscript.sh
        docker run -e PLAT=manylinux2010_x86_64 -v ${{ github.workspace }}:/io quay.io/pypa/manylinux2010_x86_64 /io/Scripts/buildscript.sh

    - uses: actions/upload-artifact@v2
      with:
        name: CrysFML - Linux
        path: ${{ github.workspace }}/dist/*.whl

  create-OSX:
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
        os: [macos-10.15]
        gcc_v: [ 10 ] # Version of GFortran we want to use.

    runs-on: ${{ matrix.os }}
      
    needs: get_Latest
    
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: CrysFML_SRC
        
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}

    - name: Install cmake
      run: pip3 install cmake delocate wheel

    - name: Build CFML (OSX)
      env:
        FC: gfortran-${{ matrix.gcc_v }}
        CC: gcc-${{ matrix.gcc_v }}
      run: |
        pip3 wheel ./ --no-deps -w ./old/
        delocate-wheel -w dist -v ./old/*.whl

    - uses: actions/upload-artifact@v2
      with:
        name: CrysFML - ${{ matrix.os }} - Python ${{ matrix.python-version }}
        path: ./dist/*.whl

  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
        os: [ubuntu-20.04]
        fc: [ifort]
    env:
      FC: ${{ matrix.fc }}

    needs: get_Latest
    
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: CrysFML_SRC
        
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}

    - name: Install cmake
      run: pip3 install cmake delocate wheel

    - name: Install CMake Linux
      if: contains(matrix.os, 'ubuntu')
      run: ci/install_cmake.sh

    - name: Add Intel repository
      if: contains(matrix.os, 'ubuntu')
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
    - name: Install Intel oneAPI compiler
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install intel-oneapi-ifort
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Build CFML (OSX)
      env:
        FC: gfortran-${{ matrix.gcc_v }}
        CC: gcc-${{ matrix.gcc_v }}
      run: |
        pip3 wheel ./ --no-deps -w ./old/
        delocate-wheel -w dist -v ./old/*.whl

    - uses: actions/upload-artifact@v2
      with:
        name: CrysFML - ${{ matrix.os }} - Python ${{ matrix.python-version }} - ${{ matrix.fc }
        path: ./dist/*.whl
      
  Upload_Artifacts:
    runs-on: ubuntu-latest
    needs: [create-Linux, create-OSX]
    steps:
    - uses: actions/download-artifact@v2
    - name: What is downloaded
      run: |
        ls -al
    - name: Upload Artifacts GitHub releases
      uses: ncipollo/release-action@v1
      with:
        draft: false
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "*.whl"
        tag: "CurrentBuild"
        body: "This is a build of the CFML libraries."
